<html lang="en">
<meta charset="utf-8">

	<head>
		<title>Simple 2D Particle system</title>

		<style type="text/css">
			body {
				background-color: #000000;
				margin: 0px;
				overflow: hidden;
			}
			#container {
				position:relative;
			}
			canvas {
				background: url(img/background.png);
				
			}
		</style>
	</head>
	<body onload="init();">

		<script src="js/Vector2.js"></script>	
		<script src="js/Edge.js"></script>	
		<script src="js/MovingEdge.js"></script>
		<script src="js/Player.js"></script>	
		<script src="js/Ladder.js"></script>	
		<script src="js/PickUp.js"></script>
		<script src="js/Enemy.js"></script>
		<script src="js/Animation.js"></script>
		<script>
			//This example inspired by a submission from one of my talks by Nic Daniel

			function random(min, max){
				return ((Math.random()*(max-min))  +min);
			}
			

			// screen size variables
			var	SCREEN_WIDTH = 640,//window.innerWidth,
				SCREEN_HEIGHT = 480,//window.innerHeight,
				HALF_WIDTH = window.innerWidth / 2,
				HALF_HEIGHT = window.innerHeight / 2,
		
			// mouse variables
				mouseX = HALF_WIDTH, 
				mouseY = HALF_HEIGHT, 
				
				canvas = document.createElement( 'canvas' ),
				context = canvas.getContext( '2d' ),
				
				edges = [], 
				ladders = [],
				pickUps = [],
				movingEdges = [],
				enemies = [],
				player, 
				leftDown, rightDown, upDown, downDown, spaceDown, 
				edgeImage = new Image();
				
				edgeImage.src = "img/Platforms.png"; 				
                
                assetImages = {};
                assetImages['ladder'] = new Image();
                assetImages['ladder'].src = 'img/ladder.png';

                
		
				console.log("edgeimage", edgeImage); 
			
			function init() {

				// CANVAS SET UP
			
				container = document.createElement( 'div' );
				container.id = "container";
				document.body.appendChild( container );

				container.appendChild(canvas); 
				canvas.width = SCREEN_WIDTH; 
				canvas.height = SCREEN_HEIGHT;
				
				initListeners(); 
				edges.push(new Edge(0,SCREEN_HEIGHT-1, SCREEN_WIDTH, edgeImage)); 
				
			//	console.log("edge", edgeImage); 
				
				edges.push(new Edge( 16, 415, 118,edgeImage )); 
				edges.push(new Edge( 69, 258, 118,edgeImage )); 
				edges.push(new Edge( 0, 244, 118,edgeImage ));
				edges.push(new Edge( 238, 298, 120,edgeImage ));
				edges.push(new Edge( 297, 153, 120,edgeImage ));
				edges.push(new Edge( 196, 56, 132,edgeImage ));
				edges.push(new Edge( 560, 200, 67,edgeImage ));
				edges.push(new Edge( 505, 40, 120,edgeImage ));
				
				movingEdges.push( new MovingEdge( 14, 112, 183, 50 ) ) ;
				movingEdges.push( new MovingEdge( 415, 328, 143, 100 ) );
				movingEdges.push( new MovingEdge( 348, 443, 67, 100) );
								
				ladders.push( new Ladder( 22, 420, 160 ) );
				ladders.push( new Ladder( 90, 420, 160 ) );
				ladders.push( new Ladder( 283, 465, 160 ) );
				ladders.push( new Ladder( 315, 166, 104 ) );
				ladders.push( new Ladder( 590, 211, 160 ) );
				
				player = new Player(20,50); 
				document.body.appendChild(player.domElement);
				
				
				// PICKUPS
				for( var i = 0 ; i < edges.length ; i ++ ){
				
				if( Math.random() > 0.2 ) {
					
						var pickup = new PickUp( random( edges[i].getLeft() , edges[i].getRight() ) ,  edges[i].getTop() ) ;
						pickUps.push( pickup ) ;
					}
				
				}

				// ENEMY ADDITION
				var enemy = new Enemy() ;
				enemy.registerNavNode( new Vector2( 10, 10 ) ) ;
				enemy.registerNavNode( new Vector2( 300, 10 ) ) ;
				enemy.registerNavNode( new Vector2( 300, 300 ) ) ;
				enemy.registerNavNode( new Vector2( 10, 300 ) ) ;
				enemies.push( enemy ) ;
			
				//loop(); 
				
				setInterval(loop, 1000 / 30);
				
			}

			//
			
			function loop() {
				
				//context.fillStyle = "red"; 
				//context.fill
				context.clearRect(0,0,SCREEN_WIDTH, SCREEN_HEIGHT); 
				
				for(var i = 0; i<ladders.length; i++){

					var ladder = ladders[i]; 
					ladder.render(context); 

			  	}
				
				for(var i = 0; i<edges.length; i++){
					
					var edge = edges[i]; 
					edge.render(context); 
					
				} 
			
				for(var j = 0; j<movingEdges.length; j++){

					var movingEdge = movingEdges[j]; 
					if( movingEdge.pos.y < movingEdge.getLowerBounds()){
						movingEdge.pos.y = movingEdge.getLowerBounds();
						movingEdge.vel.y *= -1;
					}
					else if( movingEdge.pos.y > movingEdge.getUpperBounds()){
						movingEdge.pos.y = movingEdge.getUpperBounds();
						movingEdge.vel.y *= -1;
					}
					movingEdge.update();		
					movingEdge.render(context); 	
				}
			
				
				for(var i = 0; i< pickUps.length; i++){
					
					var pickup = pickUps[i]; 
					
					if( pickup.enabled ){
						
						pickup.render(context); 
					}
				}
				
				for( i = 0; i<enemies.length; i++){
					var enemy = enemies[i]; 
					enemy.update() ;
					enemy.render(context); 
				}
				
				
				player.update(); 
				
				if(player.pos.x < 0) player.pos.x = 0; 
				else if(player.getRight()>SCREEN_WIDTH) player.pos.x = SCREEN_WIDTH-player.width; 
				
				if(player.pos.y < 0) player.pos.y = 0; 
				else if(player.getBottom()>SCREEN_HEIGHT) player.pos.y = SCREEN_HEIGHT; 
		
				if(leftDown) player.vel.x-=12; 
				else if(rightDown) player.vel.x+=12; 
				
				if( isClass( player.connectedEdge, 'Ladder' ) ) {
	 				 var ladder = player.connectedEdge;
         
	 				if(upDown) {		
									
	 					player.vel.y=-8;
						player.pos.x = ladder.getCenterX() - player.width * 0.5;
	 				}
	 				else if(downDown) {
	 	
						player.vel.y=8;
						player.pos.x = ladder.getCenterX() - player.width * 0.5;
	 				}
	 				else
	 				{
	 					player.vel.y=0;
	 				}
	 			}
		
				
				checkCollisions(); 
				
				
				player.render(context); 
				

			}
		
		
		
			function checkCollisions(){
				
				if(player.connectedEdge){
					var edge = player.connectedEdge; 
					if((player.getLeft()>edge.getRight()) || (player.getRight()<edge.getLeft()))
						player.connectedEdge = null;
                    else if( isClass(player.connectedEdge,'Ladder') &&
                     (player.getTop() > edge.getBottom()) || (player.getBottom() < edge.getTop() ))
                        player.connectedEdge = null;
					
				}
				
				
				for (var i= 0; i<edges.length; i++){
					var edge = edges[i]; 
					
					if((player.pos.y > edge.getTop()) && (player.pos.y - player.vel.y < edge.getTop())) {
						if((player.getLeft() < edge.getRight()) && (player.getRight()> edge.getLeft())) {
							player.connectedEdge = edge; 
							player.pos.y = edge.pos.y; 
							player.vel.y = 0; 
							break; 
						}
					}	
					
				}
				
				for (var j = 0; j<movingEdges.length; j++){
					var movingEdge = movingEdges[j]; 

					if((player.pos.y > movingEdge.getTop()) && (player.pos.y - player.vel.y < movingEdge.getTop())) {
						if((player.getLeft() < movingEdge.getRight()) && (player.getRight()> movingEdge.getLeft())) {
							player.connectedEdge = movingEdge; 
							player.pos.y = movingEdge.pos.y; 
							player.vel.y = 0; 
							break; 
						}
					}	

				}
				
				
				
				
				if((upDown || downDown) && ( ! isClass( player.connectedEdge, 'Ladder' ) )) {
					
					for (var i= 0; i<ladders.length; i++){
						var ladder = ladders[i]; 
					
						if((player.getLeft() < ladder.getCenterX()) && (player.getRight() > ladder.getCenterX())) {
							if((player.getTop() < ladder.getBottom()) && (player.getBottom() > ladder.getTop())) {
								player.connectedEdge = ladder; 
								player.vel.y = 0; 
	  							player.vel.x = 0;
	  							player.pos.x = ladder.getCenterX() - player.width * 0.5;
	  							break; 
							}
						}	
					
					}
				}
				
				
				for (var i= 0; i< pickUps.length; i++){
				
					var pickup = pickUps[i];
					
					if( checkHorizCollision( player , pickup ) ){
						if( checkVertCollision( player, pickup ) ){
							pickup.collect() ;
						}
					}
				}
				
			}
				
				
				
			function checkVertCollision( obj1 , obj2 ){
		
				if(((obj1.pos.y > obj2.getTop()) && (obj1.pos.y <= obj2.pos.y) ) || (( obj1.getTop() < obj2.pos.y) && ( obj1.getTop() > obj2.getTop() ))) return true ;
				return false ;
			}
			
			function checkHorizCollision( obj1 , obj2 ){
			
				if((obj1.getLeft() < obj2.getRight()) && (obj1.getRight()> obj2.getLeft())) return true ;
				return false ;
			
			}
				
				
			function initListeners() {
				document.addEventListener('mousemove', onMouseMove, false);
				document.addEventListener( 'mousedown', onMouseDown, false );
				document.addEventListener( 'mouseup', onMouseUp, false );
				
				document.addEventListener( 'keydown', onKeyDown, false );
				document.addEventListener( 'keyup', onKeyUp, false );
				
			}

			function onMouseMove( event ) {
				event.preventDefault();
				mouseX = event.clientX;
				mouseY = event.clientY;
			}

			function onMouseDown(event) {
			
			}
			function onMouseUp(event) {
			}

			function onKeyDown(e) {	
				if(e.keyCode == 38) upDown = true; 
				else if(e.keyCode == 40) downDown = true; 
				else if(e.keyCode == 37) leftDown = true; 
				else if (e.keyCode == 39) rightDown = true; 
				else if (e.keyCode == 32) 
				{
					player.jump(); 
					spaceDown = true;
				}

			}
			function onKeyUp(e) {
				if(e.keyCode == 38) upDown = false; 
				else if(e.keyCode == 40) downDown = false; 
				else if(e.keyCode == 37) leftDown = false; 
				else if (e.keyCode == 39) rightDown = false;
				else if (e.keyCode == 32) spaceDown = false;
			}

  			function isClass(obj, className) {
				if( ! obj ) return false;
				classFound = obj.constructor.toString().match(/function ([a-z]+)/i).pop();
				return classFound == className;
			}

		</script>
	</body>
</html>
