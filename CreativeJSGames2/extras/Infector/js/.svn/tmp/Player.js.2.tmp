function Player(x, y, runcycle, jumpcycle, idlecycle, climbcycle) {

	this.startX = x ;
	this.startY = y ;

	var pos = this.pos = new Vector2(this.startX,this.startY); 
	var vel = this.vel = new Vector2(0,0); 
	var drag = this.drag = new Vector2(0.4, 0.95); 
	
	this.gravity = 3;
	
	this.width = 20; 
	this.height = 43; 
	
	this.connectedEdge = null; 

	var runAnimation = this.runAnimation = new Animation(runcycle, 61.5, 73);
	runAnimation.offsetY = -73;  
	runAnimation.offsetX = -20;  
	
	var domElement = this.domElement = this.runAnimation.domElement;
	
	var jumpAnimation = this.jumpAnimation = new Animation(jumpcycle, 60,99, domElement); 
	jumpAnimation.offsetY = -99; 
	jumpAnimation.offsetX = -20;  
	
	jumpAnimation.looping = false; 
	
	var idleAnimation = this.idleAnimation = new Animation(idlecycle, 61.5, 73,domElement);
	idleAnimation.offsetY = -73; 
	idleAnimation.offsetX = -20;  	
	idleAnimation.looping = false;
	 
	var climbAnimation = this.climbAnimation = new Animation(climbcycle, 275/5, 76,domElement);
	climbAnimation.offsetY = -76; 
	climbAnimation.offsetX = -20;  	
	climbAnimation.looping = true; 
	
	var currentAnimation = this.currentAnimation = this.idleAnimation; 
	
	this.reset = function() {
		this.currentAnimation = this.idleAnimation; 
		vel.x = 0 ;
		vel.y = 0 ;
		pos.x = this.startX ;
		pos.y = this.startY ;
		this.connectedEdge = null ;
	};
	
	this.reset() ;
	
	this.update = function (){
	
		vel.x *= drag.x; 
		vel.y *= drag.y; 
		
		
		if(!this.connectedEdge){ 
			vel.y+=this.gravity; 
		}
		else if(!isClass(this.connectedEdge, "Ladder"))	{
			pos.y = this.connectedEdge.pos.y;
		}
			
		pos.plusEq(vel); 
		
		if(vel.x<0) this.setScaleX(1); 
		else if(vel.x>0) this.setScaleX(-1); 
		
		if(this.connectedEdge)	{
			if(isClass(this.connectedEdge, "Ladder")){
				if(Math.abs(vel.y)>0.5) this.currentAnimation.playing = true; 
		 		else this.currentAnimation.playing = false;
				
			} else {
				if(Math.abs(vel.x)>0.5) this.currentAnimation = runAnimation; 
	 			else this.currentAnimation = idleAnimation; 
			}
		}
	
	}; 
	
	this.render = function(c){
		
		// this.runAnimation.x = this.pos.x; 
		// 	this.runAnimation.y = this.pos.y; 
		// 	this.runAnimation.update(); 
		
	 	this.currentAnimation.x = this.pos.x; 
		this.currentAnimation.y = this.pos.y; 
		this.currentAnimation.update(); 
		
		/* 
		// DEBUG draw collision rect
		c.save(); 
		c.fillStyle = "rgba(255,255,255,0.1)"; 
		c.fillRect(this.getLeft(), this.getTop(), this.width, this.height); 
		c.restore();
		*/
			
	
	
	};
	
	this.moveLeft = function() {
		this.vel.x-=12; 
		
	};
	
	this.moveRight = function() {
		
		this.vel.x+=12; 
		
	};
	
	this.jump = function() {
			
		if((this.connectedEdge) && (!isClass(this.connectedEdge, "Ladder"))){
			vel.y -= 30; 
			this.connectedEdge = null; 
			this.currentAnimation = jumpAnimation; 
			this.currentAnimation.currentFrame = 0; 
			this.currentAnimation.playing = true; 
		}

	};
	
	this.fall = function(){
		this.connectedEdge = null;
		this.currentAnimation = jumpAnimation; 
		this.currentAnimation.currentFrame = 0; 
		this.currentAnimation.playing = true;
	};
	
	this.climb = function(){
		this.currentAnimation = climbAnimation; 
		
	};

	this.land = function(){
	
		this.currentAnimation = runAnimation; 
		
	};

	
	this.getLeft = function() { 
		return pos.x; 
	};
	
	this.getRight = function() { 
		
		return pos.x+this.width; 
		
	};

	this.getTop = function() {
		return pos.y-this.height; 
		
	};
	
	this.getBottom = function () {
		
		return pos.y; 
		
	};


	this.setScaleX = function(sx){
		this.jumpAnimation.scaleX = this.idleAnimation.scaleX = this.runAnimation.scaleX = sx; 
		
		
	};
	
}